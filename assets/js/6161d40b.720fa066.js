"use strict";(self.webpackChunkuniversalreference_io=self.webpackChunkuniversalreference_io||[]).push([[97],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),f=a,m=p["".concat(d,".").concat(f)]||p[f]||c[f]||i;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},113:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={},o="Model",l={unversionedId:"Client/design/model",id:"Client/design/model",title:"Model",description:"- Model",source:"@site/docs/Client/design/model.md",sourceDirName:"Client/design",slug:"/Client/design/model",permalink:"/docs/Client/design/model",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Client/design/model.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Design",permalink:"/docs/category/design"},next:{title:"Node Types",permalink:"/docs/Client/design/nodes"}},d={},s=[{value:"Node",id:"node",level:2},{value:"NodeBuilder",id:"nodebuilder",level:2},{value:"Iterator",id:"iterator",level:2},{value:"Matcher",id:"matcher",level:2},{value:"Attribute",id:"attribute",level:2},{value:"AttributeSet",id:"attributeset",level:2}],u={toc:s};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"model"},"Model"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#design-model"},"Model")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#interface-types-defined-in-the-model-package"},"Interface types defined in the model package.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#node"},"Node")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#nodebuilder"},"NodeBuilder")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#iterator"},"Iterator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#matcher"},"Matcher")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#attribute"},"Attribute")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#attributeset"},"AttributeSet"))),(0,a.kt)("p",null,"The model package and the sub-package contains all types and methods that can be used to define and work with UOR data."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information on the concrete node types, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Client/design/nodes"},"nodes"),".")),(0,a.kt)("h1",{id:"interface-types-defined-in-the-model-package"},"Interface types defined in the model package."),(0,a.kt)("h2",{id:"node"},"Node"),(0,a.kt)("p",null,"Node is an interface that is used to represent different types of self-describing addressable data (typically stored in\nfiles locally or remotely). The methods defined in this interface are intended to be read-only. For methods that\nmanipulate or assemble nodes, see NodeBuilder."),(0,a.kt)("h2",{id:"nodebuilder"},"NodeBuilder"),(0,a.kt)("p",null,"NodeBuilder is an interface that defines methods for building immutable Node types."),(0,a.kt)("h2",{id:"iterator"},"Iterator"),(0,a.kt)("p",null,"Nodes can be iterable (e.g. a UOR Collection). Using the iterator interface allows these structures to be iterated over\nduring traversal."),(0,a.kt)("h2",{id:"matcher"},"Matcher"),(0,a.kt)("p",null,"Matcher is an interface that defines methods for node searching/matching that can guide Node graph traversal."),(0,a.kt)("h2",{id:"attribute"},"Attribute"),(0,a.kt)("p",null,"Attribute is an interface that defines a single attribute values with a key that is a type of string and a value that\ncan be a string, boolean, integer, number, or null value."),(0,a.kt)("h2",{id:"attributeset"},"AttributeSet"),(0,a.kt)("p",null,"AttributeSet is an interface that represents the methods that would be used by a structure containing a set of Node\nattributes."))}c.isMDXComponent=!0}}]);